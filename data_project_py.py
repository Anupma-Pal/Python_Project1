# -*- coding: utf-8 -*-
"""data_project.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UeyoZhnthl3f8dQVMTIIHTofSjgifGyd
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

dete_survey = pd.read_csv('dete_survey.csv')

tafe_survey = pd.read_csv('tafe_survey.csv')

pd.options.display.max_columns = 150 #(to avoid truncated output)
print(dete_survey.info())
print('\n')
print(dete_survey.head())
print(tafe_survey.info())
print('\n')
print(tafe_survey.head())
dete_survey = pd.read_csv('dete_survey.csv', na_values = 'Not Stated')
dete_survey_updated = dete_survey.drop(dete_survey.columns[28:49], axis = 1)

tafe_survey_updated = tafe_survey.drop(tafe_survey.columns[17:66], axis = 1)
print(tafe_survey_updated.columns)
print('\n')
print(dete_survey_updated.columns)
dete_survey_updated.columns = dete_survey_updated.columns.str.lower().str.replace(' ','_').str.strip()

print(dete_survey_updated.columns)
renaming_dict = {'Record ID': 'id', 'CESSATION YEAR': 'cease_date', 'Reason for ceasing employment': 'separationtype', 'Gender. What is your Gender?': 'gender', 'CurrentAge. Current Age': 'age',
       'Employment Type. Employment Type': 'employment_status',
       'Classification. Classification': 'position',
       'LengthofServiceOverall. Overall Length of Service at Institute (in years)': 'institute_service',
       'LengthofServiceCurrent. Length of Service at current workplace (in years)': 'role_service'}

tafe_survey_updated = tafe_survey_updated.rename(renaming_dict, axis = 1)

tafe_survey_updated.columns
dete_survey_updated['separationtype'].value_counts()
tafe_survey_updated['separationtype'].value_counts()
tafe_resignations = tafe_survey_updated.loc[tafe_survey_updated['separationtype'] == 'Resignation'].copy()

dete_survey_updated['separationtype'] = dete_survey_updated['separationtype'].str.split('-').str[0]

dete_resignations = dete_survey_updated.loc[dete_survey_updated['separationtype'] == 'Resignation'].copy()

print(tafe_resignations['separationtype'].unique())
print('\n')
print(dete_resignations['separationtype'].unique())
dete_resignations['cease_date'].value_counts()
dete_resignations['cease_date'] = (dete_resignations['cease_date']
                                   .str.extract(r'([1-2][0-9]{3})').astype(float))

print(dete_resignations['cease_date'].value_counts())
dete_resignations['dete_start_date'].value_counts().sort_index()
tafe_resignations['cease_date'].value_counts()
dete_resignations['institute_service'] = dete_resignations['cease_date'] - dete_resignations['dete_start_date']
tafe_resignations['Contributing Factors. Dissatisfaction'].value_counts()
tafe_resignations['Contributing Factors. Job Dissatisfaction'].value_counts()
def update_vals(element):
    if element == '-':
        return False
    elif pd.isnull(element):
        return np.nan
    else:
        return True
    
# Creating 'dissatisfied' column for tafe_resignations:    
tafe_resignations[['Contributing Factors. Job Dissatisfaction', 'Contributing Factors. Dissatisfaction']] = (
tafe_resignations[['Contributing Factors. Job Dissatisfaction', 'Contributing Factors. Dissatisfaction']]
    .applymap(update_vals))
    
tafe_resignations['dissatisfied'] = tafe_resignations[['Contributing Factors. Job Dissatisfaction', 'Contributing Factors. Dissatisfaction']].any(1, skipna=False)

tafe_resignations['dissatisfied'].value_counts(dropna=False)
# Creating 'dissatisfied' column for dete_resignations: 
dete_resignations['dissatisfied'] = dete_resignations[['job_dissatisfaction',
       'dissatisfaction_with_the_department', 'physical_work_environment',
       'lack_of_recognition', 'lack_of_job_security', 'work_location',
       'employment_conditions', 'work_life_balance',
       'workload']].any(1, skipna=False)

dete_resignations['dissatisfied'].value_counts(dropna=False)
dete_resignations_up = dete_resignations
tafe_resignations_up = tafe_resignations

dete_resignations_up['institute'] = 'DETE'
tafe_resignations_up['institute'] = 'TAFE'
combined = pd.concat([dete_resignations_up, tafe_resignations_up], ignore_index=True)

combined.head()
combined_updated = combined.dropna(thresh=500, axis = 1)

combined_updated.notnull().sum().sort_values()
combined_updated.head()
combined_updated['institute_service'].value_counts()
extracted_years = (combined_updated['institute_service']
                  .astype(str).str.extract(r'(\d+)')
                  .astype('float'))

combined_updated['institute_service_up'] = extracted_years

combined_updated['institute_service_up'].value_counts()
def career_stage(element):
    if element < 3:
        return 'New'
    elif 3 <= element < 7:
        return 'Experienced'
    elif 7 <= element < 11:
        return 'Established'
    elif pd.isnull(element):
        return np.nan
    else:
        return 'Veteran'
    
# Apply this function to `institute_service_up` and store the results in `service_cat`.

combined_updated['service_cat'] = combined_updated['institute_service_up'].apply(career_stage)

combined_updated['service_cat'].value_counts()
combined_updated['dissatisfied'].value_counts(dropna=False)
combined_updated['dissatisfied'] = combined_updated['dissatisfied'].fillna(False)
dissatisfied_pivot = combined_updated.pivot_table(index='service_cat', values='dissatisfied')

# Sorting the dissatisfaction average in ascending order:
dissatisfied_pivot = dissatisfied_pivot.sort_values('dissatisfied')

dissatisfied_pivot
# %matplotlib inline
import matplotlib.style as style
style.use('fivethirtyeight')

dissatisfied_pivot.plot(kind='bar', rot =0)
combined_updated['age'].value_counts(dropna = False)
extracted_age = (combined_updated['age']
                  .astype(str).str.extract(r'(\d+)')
                  .astype('float'))

combined_updated['age'] = extracted_age
extracted_age.value_counts(dropna = True)
def age_categories(element):
    if element < 21:
        return '21 or less'
    elif 21 <= element < 25:
        return '21-25'
    elif 25 <= element < 30:
        return '26-30'
    elif 30 <= element < 35:
        return '31-35'
    elif 35 <= element < 40:
        return '36-40'
    elif 40 <= element < 45:
        return '41-50'
    elif 50 <= element < 60:
        return '51-60'
    else:
        return 'Above 61'
    
combined_updated['age_category'] = combined_updated['age'].apply(age_categories)

print(combined_updated['age_category'].value_counts())

dissatisfied_age = combined_updated.pivot_table(index='age_category', values='dissatisfied')

dissatisfied_age = dissatisfied_age.sort_index()

print(dissatisfied_age)
dissatisfied_age.plot(kind='bar', rot =30)
dissatisfied_institute = (combined_updated.
                          pivot_table(index='institute',
                                      values = 'dissatisfied'))

dissatisfied_institute.plot(kind='bar', rot = 0)